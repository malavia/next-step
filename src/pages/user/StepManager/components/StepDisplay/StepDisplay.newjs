import React, { useState } from 'react';
import { Plus, Trash2, Save, X, GripVertical, Clock, AlertTriangle } from 'lucide-react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { EditableContent } from '@/components/ui/EditableContent';
import { Progress } from "@/components/ui/progress";
import { NewStepInput } from './NewStepInput';
import {SubStep} from './SubStep';

const PriorityBadge = ({ priority }) => {
  const colors = {
    high: "bg-red-100 text-red-800",
    medium: "bg-yellow-100 text-yellow-800",
    low: "bg-green-100 text-green-800"
  };
  
  return (
    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${colors[priority] || ''}`}>
      {priority?.charAt(0).toUpperCase() + priority?.slice(1)}
    </span>
  );
};



const StepCard = ({
  step,
  index,
  provided,
  snapshot,
  onUpdateStep,
  onDeleteStep,
  onAddSubStep,
  onUpdateSubStep,
  onDeleteSubStep
}) => {
  const progress = (step.subSteps.filter(sub => sub.completed).length / step.subSteps.length) * 100;
  const isOverdue = new Date(step.deadline) < new Date() && !step.completed;

  return (
    <div
      ref={provided.innerRef}
      {...provided.draggableProps}
      className={`mb-4 border rounded-lg p-4 ${
        snapshot.isDragging ? 'bg-gray-50 shadow-lg' : ''
      } ${step.type === 'parallel' ? 'border-blue-200' : 'border-gray-200'}`}
    >
      <div className="flex items-center justify-between gap-2">
        <div 
          {...provided.dragHandleProps}
          className="cursor-grab hover:text-gray-600"
        >
          <GripVertical size={20} />
        </div>
        
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-lg font-medium">{`${index + 1}.`}</span>
            <EditableContent
              content={step.content}
              onSave={(newContent) => onUpdateStep({ ...step, content: newContent })}
            />
            <PriorityBadge priority={step.priority} />
            {step.type === 'parallel' && (
              <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                Parallèle
              </span>
            )}
          </div>
          
          {step.deadline && (
            <div className="flex items-center gap-1 text-sm text-gray-600">
              <Clock size={16} />
              <span>{new Date(step.deadline).toLocaleDateString()}</span>
              {isOverdue && (
                <AlertTriangle size={16} className="text-red-500" />
              )}
            </div>
          )}
        </div>

        <div className="flex gap-2">
          <button
            onClick={() => onAddSubStep(step.id)}
            className="p-2 text-green-600 hover:text-green-800"
          >
            <Plus size={16} />
          </button>
          <button
            onClick={() => onDeleteStep(step.id)}
            className="p-2 text-red-600 hover:text-red-800"
          >
            <Trash2 size={16} />
          </button>
        </div>
      </div>

      {step.subSteps.length > 0 && (
        <Progress value={progress} className="my-2" />
      )}
      
      <div className="ml-8 mt-2">
        {step.subSteps.map((subStep) => (
          <subStep
            subStep={subStep}
            onUpdate={onUpdateSubStep}
            onDelete={onDeleteSubStep}
          />
        ))}
      </div>
    </div>
  );
};

export const StepDisplay = ({
  steps,
  loading,
  isGenerating,
  onUpdateStep,
  onDeleteStep,
  onAddStep,
  onAddSubStep,
  onUpdateSubStep,
  onDeleteSubStep,
  onReorderSteps
}) => {
  const handleDragEnd = (result) => {
    if (!result.destination) return;
    
    const sourceIndex = result.source.index;
    const destinationIndex = result.destination.index;
    
    if (sourceIndex === destinationIndex) return;
    
    const reorderedSteps = Array.from(steps);
    const [removed] = reorderedSteps.splice(sourceIndex, 1);
    reorderedSteps.splice(destinationIndex, 0, removed);
    
    onReorderSteps(reorderedSteps);
  };

/*
  function handleAddStep(step) {
    // Ensure step exists and content is a string before trimming
    if (step && typeof step.content === 'string' && step.content.trim()) {
      onAddStep(step);
      return true;
    }
    return false;
  }*/


  function handleAddStep(step) {
    console.log('StepDisplay - received step:', step);
    console.log('StepDisplay - step content type:', typeof step?.content);
    
    if (!step) {
      console.log('StepDisplay - step is null or undefined');
      return false;
    }
    
    if (!step.content) {
      console.log('StepDisplay - step.content is null or undefined');
      return false;
    }
    
    if (typeof step.content !== 'string') {
      console.log('StepDisplay - step.content is not a string, converting...');
      step.content = String(step.content || '');
    }
    
    console.log('StepDisplay - final step content:', step.content);
    
    if (step.content.trim()) {
      onAddStep(step);
      return true;
    }
    return false;
  }



  if (loading) {
    return (
      <div className="mt-4 max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-6">
        <div className="text-center">Chargement...</div>
      </div>
    );
  }

  //const parallelSteps = steps.filter(step => step.type === 'parallel');
  //const sequentialSteps = steps.filter(step => step.type === 'sequential');


  return (
    <div className="mt-4 max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-6 dark:bg-gray-800">
      <h2 className="text-xl font-bold mb-4">Liste des étapes :</h2>
      
      <NewStepInput onAddStep={handleAddStep} />

      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="steps">
          {(provided) => (
            <div {...provided.droppableProps} ref={provided.innerRef}>
              {steps.map((step, index) => (
                <Draggable 
                  key={step.id} 
                  draggableId={step.id} 
                  index={index}
                >
                  {(provided, snapshot) => (
                    <StepCard
                      step={step}
                      index={index}
                      provided={provided}
                      snapshot={snapshot}
                      onUpdateStep={onUpdateStep}
                      onDeleteStep={onDeleteStep}
                      onAddSubStep={onAddSubStep}
                      onUpdateSubStep={onUpdateSubStep}
                      onDeleteSubStep={onDeleteSubStep}
                    />
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>

      {steps.length === 0 && (
        <div className="text-gray-500 text-center">
          {isGenerating ? "Génération en cours..." : "Aucune étape pour le moment"}
        </div>
      )}
    </div>
  );
};

export default StepDisplay;